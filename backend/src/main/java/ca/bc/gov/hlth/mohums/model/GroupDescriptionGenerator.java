package ca.bc.gov.hlth.mohums.model;

import java.util.LinkedHashMap;
import java.util.List;
import java.util.stream.Collectors;

/**
 * The class generates description for a group within MOH applications realm.
 * The description shows what permissions(roles) within UMS does members of particular group have.
 * Description are generated by dividing permissions into 4 groups, and transforming the 'some-role-name' schema into text.
 * There are four main roles groups:
 * 1. user management - managing user group, details, roles
 * 2. client management - managing clients like HEM, MAID etc.
 * 3. general view roles - view metrics, users, groups
 * 4. miscellaneous - don't fit to any naming-schema of roles, for example create-user
 */


public class GroupDescriptionGenerator {

    private static final String DESCRIPTION = "As a member of %s group, an administrator is able to: \n%s";
    private static final String BULLET_POINT = '\u2022' + " ";

    public static Group createGroupWithDescription(LinkedHashMap<String, Object> body) {
        LinkedHashMap clientRoles = (LinkedHashMap) body.get("clientRoles");
        Object umsRolesNode = clientRoles.get("USER-MANAGEMENT-SERVICE");
        List<String> umsRoles = umsRolesNode == null ? List.of() : (List<String>) umsRolesNode;
        String groupName = body.get("name").toString();

        return new Group(body.get("id").toString(),
                groupName,
                body.get("path").toString(),
                umsRoles,
                umsRoles.isEmpty() ? "No roles within UMS" : getDescription(umsRoles, groupName));
    }

    private static String getDescription(List<String> umsRoles, String groupName) {
        StringBuilder groupRolesDescription = new StringBuilder();
        List<String> descriptions = List.of(getMiscellaneousRolesDescription(umsRoles),
                getUserManagementRolesDescription(umsRoles),
                getClientManagementRolesDescription(umsRoles),
                getGeneralViewRolesDescription(umsRoles));

        descriptions.stream().filter(d -> !d.isEmpty()).forEach(groupRolesDescription::append);
        return String.format(DESCRIPTION, groupName, groupRolesDescription);
    }

    // roles with view-client prefix are for client management
    private static String getGeneralViewRolesDescription(List<String> umsRoles) {
        List<String> generalViewRoles = umsRoles.stream()
                .filter(role -> role.contains("view-") && !role.contains("view-client")).collect(Collectors.toList());
        String prefix = "View ";

        return createRolesDescription(generalViewRoles, prefix);
    }

    private static String getClientManagementRolesDescription(List<String> umsRoles) {
        List<String> clientManagementRoles = umsRoles.stream().filter(role -> role.contains("view-client-")).collect(Collectors.toList());
        String prefix = "Manage ";

        return createRolesDescription(clientManagementRoles, prefix);
    }

    private static String getUserManagementRolesDescription(List<String> umsRoles) {
        List<String> userManagementRoles = umsRoles.stream().filter(role -> role.contains("manage-")).collect(Collectors.toList());
        String prefix = "Manage user ";

        return createRolesDescription(userManagementRoles, prefix);
    }

    private static String getMiscellaneousRolesDescription(List<String> umsRoles) {
        List<String> miscellaneousRoles = umsRoles.stream()
                .filter(role -> !role.contains("manage-") && !role.contains("view-"))
                .collect(Collectors.toList());

        if(miscellaneousRoles.isEmpty()){
            return "";
        } else{
            String miscRoles = miscellaneousRoles.stream().map(role -> role.replace("-", " ")).collect(Collectors.joining(", ")) + ".\n";
            return BULLET_POINT + miscRoles.substring(0, 1).toUpperCase() + miscRoles.substring(1);
        }
    }

    private static String createRolesDescription(List<String> userManagementRoles, String prefix) {
        if(userManagementRoles.isEmpty()){
            return "";
        } else{
            List<String> roleKeyWords = userManagementRoles.stream().map(role -> {
                        String[] splitString = role.split("-", 3);
                        return splitString[splitString.length - 1];
                    })
                    .distinct()
                    .collect(Collectors.toList());

            String rolesString = String.join(", ", roleKeyWords);

            return  BULLET_POINT + prefix + rolesString + ".\n";
        }
    }
}
